" ideaplugins->ideaVim.ideaVim-EasyMotion.ideaVimExtension,Whick-Key
" ===========================================
" = 插件 =====================================
" ===========================================
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'

" ================================================================================================
" = 基础配置 =====================================
" ================================================================================================
" 显示当前模式
set showmode
" 启动easymotion
set easymotion
" 设置ctrl-d和ctrl-u的行数
set scroll=5
" 启动vim-surround插件
set surround
" 通过插件在每次回到normal模式的时候自动切换到英文输入法
set keep-english-in-normal
" 配置ideavim的insert模式下的复制和粘贴
set clipboard+=unnamed
set clipboard+=ideaput
" 设置ideavim和idea之间的书签通用，但是通用的A-Z标签
set ideamarks
" 开启语法高亮功能
syntax enable
" 允许用指定语法高亮配色方案替换默认方案
syntax on
" 模式搜索实时预览,增量搜索
set incsearch
" 设置搜索高亮
set hlsearch
" 忽略大小写
set ignorecase
set scrolloff=30
set history=200
" 显示光标当前位置
set ruler
" 高亮显示当前行/列
set cursorline
 " 显示行号
set number
set relativenumber
" 高亮当前搜索
set incsearch
set hlsearch
" 设置tab键和自动缩进
set tabstop=4
set shiftwidth=4
set softtabstop=4
" paste之后不会把yank的内容替换掉
vmap p "_dp


" ================================================================================================
" = ide与vim的快捷键持久化 =====================================
" ================================================================================================
sethandler <C-H> a:vim
sethandler <C-J> a:vim
sethandler <C-K> a:vim
sethandler <C-l> a:vim



" ================================================================================================
" = No Leader Keymaps =====================================
" ================================================================================================
"快速选择一个单词
noremap <space> viw
" 粘贴后不替换 yank 内容
vmap p _dp

" 插入模式下的映射
" Ctrl + h 左移光标
imap <C-h> <Left>
" Ctrl + j 下移光标
imap <C-j> <Down>
" Ctrl + k 上移光标
imap <C-k> <Up>
" Ctrl + l 右移光标
imap <C-l> <Right>

" go to somewhere (g in normal mode for goto somewhere)
" 跳转到下一个错误
nmap go <action>(GotoNextError)
nmap gl <action>(JumpToLastChange)
nmap gc <action>(JumpToNextChange)
nmap gr <action>(RecentFiles)
nmap gd <action>(GotoDeclaration)
nmap gs <action>(GotoSuperMethod)
" 跳转到测试
nmap gt <action>(GotoTest)
nmap gi <action>(GotoImplementation)
nmap gu <action>(ShowUsages)
nmap gb <action>(Back)
nmap gf <action>(Forward)
"上一个方法
nmap gp <action>(MethodUp)
"下一个方法
nmap gn <action>(MethodDown)
" Move half page faster (上下翻页)
nmap J <C-d>
nmap K <C-u>

" 上一个 tab
nmap H :action PreviousTab<CR>
" 下一个 tab
nmap L :action NextTab<CR>

" 删除相关
 " 删除到行尾
nmap df d$
" 删除到行首
nmap dl d^
" 删除方法
nmap dam <action>(MethodUp)v0Of{%d


" ================================================================================================
" = Plugins =====================================
" ================================================================================================
"普通模式强制以英文模式
set keep-english-in-normal-and-restore-in-insert

" ⭐️⭐️⭐️ Which-Key ⭐️⭐️⭐️
set which-key
set notimeout

" ================================================================================================
" = Leader Keymaps =====================================
" ================================================================================================
" leaderkey
let mapleader=","


" a add ⭐️
let g:WhichKeyDesc_Add = "<leader>a add"
" 新建类
let g:WhichKeyDesc_Add_NewClass = "<leader>ac 新建类"
nnoremap <leader>ac :action NewClass<CR>
" 新建文件 (嘻嘻,啥都可以直接用快捷键建立,一个字爽)
let g:WhichKeyDesc_Add_NewElement = "<leader>ae 新建文件"
nnoremap <leader>ae :action NewElement<CR>



" c code ⭐️
let g:WhichKeyDesc_code = "<leader>c Code"
" 将当前行给注释掉
let g:WhichKeyDesc_code_CommentByLineComment = "<leader>cc 当前行注释"
nnoremap <Leader>cc :action CommentByLineComment<CR>
" 打开General菜单
let g:WhichKeyDesc_code_actionGenerate = "<leader>ca 打开General菜单"
nnoremap <Leader>ca :action Generate<CR>
" 代码环绕(快速添加if 或者while)
let g:WhichKeyDesc_code_SurroundWith = "<leader>cs 代码环绕(快速添加if 或者while)"
nnoremap <leader>cs :action SurroundWith<CR>
" 复制class引用
let g:WhichKeyDesc_code_CopyReference = "<leader>ce 复制class引用"
nnoremap <Leader>ce :action CopyReference<CR>
" 重命名 变量、类名
let g:WhichKeyDesc_code_RenameElement = "<leader>cr 重命名 变量、类名"
nnoremap <Leader>cr :action RenameElement<CR>
" 重命名 文件
let g:WhichKeyDesc_code_RenameFile = "<leader>cf 重命名文件"
nnoremap <Leader>cf :action RenameFile<CR>




" e: Explorer ⭐️
let g:WhichKeyDesc_Explorer = "<leader>e Explorer"
" 提取方法
let g:WhichKeyDesc_Explorer_ExtractMethod = "<leader>em 提取方法"
nmap <leader>em <action>(ExtractMethod)
" 提取常量
let g:WhichKeyDesc_Explorer_IntroduceConstant = "<leader>ec 提取常量"
nmap <leader>ec <action>(IntroduceConstant)
" 提取字段
let g:WhichKeyDesc_Explorer_IntroduceField = "<leader>ef 提取字段"
nmap <leader>ef <action>(IntroduceField)
" 提取变量
let g:WhichKeyDesc_Explorer_IntroduceVariable = "<leader>ev 提取变量"
nmap <leader>ev <action>(IntroduceVariable)




" f: Find ⭐️
let g:WhichKeyDesc_Find = "<leader>f Find"
let g:WhichKeyDesc_Find_FindFile = "<leader>ff FindFile"
nmap <leader>ff <action>(GotoFile)
" FindInPath
let g:WhichKeyDesc_Find_FindText = "<leader>ft FindInPath"
nmap <leader>ft <action>(FindInPath)
" GotoAction
let g:WhichKeyDesc_Find_Commands = "<leader>fa GotoAction"
nmap <leader>fa <action>(GotoAction)
" GotoSymbol
let g:WhichKeyDesc_Find_FindFileLocation = "<leader>fs GotoSymbol"
nmap <leader>fs <action>(GotoSymbol)
" GotoClass
let g:WhichKeyDesc_Find_GotoClass = "<leader>fc GotoClass"
nmap <leader>fc <action>(GotoClass)
" 相当于IDEA的两次shift按钮
let g:WhichKeyDesc_Find_SearchEverywhere = "<leader>fe SearchEverywhere"
nnoremap <Leader>fe :action SearchEverywhere<CR>
" 定位当前文件在项目中的位置
nmap <leader>fl <action>(SelectInProjectView)


" g: Git ⭐️
let g:WhichKeyDesc_Git = "<leader>g Git"
" 回滚
let g:WhichKeyDesc_Git_RollbackHunk = "<leader>gr 回滚"
nmap <leader>gr :action Vcs.RollbackChangedLines<CR>
" 显示git菜单
let g:WhichKeyDesc_Git_Menu = "<leader>gm 显示git菜单"
nnoremap <leader>gm :action Git.Menu<CR>
" CompareWithBranch
let g:WhichKeyDesc_Git_CompareWithBranch  = "<leader>gb 和其它分支对比"
nnoremap <leader>gb :action Git.CompareWithBranch<CR>
" Annotate
let g:WhichKeyDesc_Git_Annotate  = "<leader>ga 类变更注释"
nnoremap <leader>ga :action Annotate<CR>
" 新建分支
let g:WhichKeyDesc_Git_CreateNewBranch  = "<leader>gn 新建分支"
nnoremap <leader>gn :action Git.CreateNewBranch<CR>
" 展示分支列表
let g:WhichKeyDesc_Git_Branches = "<leader>ge 展示分支列表"
nnoremap <leader>ge :action Git.Branches<CR>
" Git.Merge
let g:WhichKeyDesc_Git_Merge = "<leader>gg 分支合并Merge"
nnoremap <leader>gg :action Git.Merge<CR>
" ShowTabbedFileHistory
let g:WhichKeyDesc_Git_ShowTabbedFileHistory = "<leader>gy 当前文件Git历史"
nmap <leader>gy <action>(Vcs.ShowTabbedFileHistory)
" gitPull
let g:WhichKeyDesc_Git_Pull  = "<leader>gp 拉取远程代码"
nnoremap <leader>gp :action Git.Pull<CR>



" i: Insert ⭐️
let g:WhichKeyDesc_Insert = "<leader>i Insert"
" InsertSemicolon
let g:WhichKeyDesc_Insert_InsertSemicolon = "<leader>ix 结尾插入;"
nmap <leader>ix A;<ESC>
" nmap <leader>ix A;<ESC>o 



" n: No ⭐️
let g:WhichKeyDesc_No = "<leader>n No"
let g:WhichKeyDesc_No_Highlight = "<leader>nl 去除高亮"
nmap <leader>nl :nohlsearch<CR>



" r: Run/Re ⭐️
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
" run
let g:WhichKeyDesc_RunOrRe_Run = "<leader>rr Run"
nnoremap <Leader>rr :action Run<CR>
" RunClass
let g:WhichKeyDesc_RunOrRe_RunClass = "<leader>rc RunClass"
nnoremap <Space>rc :action RunClass<CR>
" 重运行
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rn ReRun"
nnoremap <Leader>rn :action Rerun<CR>
" debug
let g:WhichKeyDesc_RunOrRe_Debug = "<leader>rd Debug"
nnoremap <Leader>rd :action Debug<CR>
" ChooseRunConfiguration
let g:WhichKeyDesc_RunOrRe_ChooseRunConfiguration = "<leader>ri ChooseRunConfiguration"
nnoremap <leader>rc :action ChooseRunConfiguration<CR>
" ChooseDebugConfiguration
let g:WhichKeyDesc_RunOrRe_ChooseDebugConfiguration = "<leader>ro ChooseDebugConfiguration"
nnoremap <leader>ro :action ChooseDebugConfiguration<CR>
" 重加载 ideavimrc 配置
let g:WhichKeyDesc_RunOrRe_ReloadVimRc = "<leader>rl 重载ideavimrc配置"
nnoremap <leader>rl :action IdeaVim.ReloadVimRc.reload<CR>



" s: Show ⭐️
let g:WhichKeyDesc_Show = "<leader>s Show"
" 展示类结构
let g:WhichKeyDesc_Show_FileStructure = "<leader>ss 展示类结构"
nmap <leader>ss <action>(FileStructurePopup)
" 展示书签
let g:WhichKeyDesc_Show_Bookmarks = "<leader>sb 展示书签"
nmap <leader>sb <action>(ShowBookmarks)
" 展示当前文件路径
let g:WhichKeyDesc_Show_ShowFilePath = "<leader>sp 展示当前文件路径"
nnoremap <Leader>sp :action ShowFilePath<CR>
" 相当于鼠标右键
let g:WhichKeyDesc_Show_ShowPopupMenu = "<leader>sh 鼠标右键"
nnoremap <leader>sh :action ShowPopupMenu<CR>
" 展示类继承关系
let g:WhichKeyDesc_Show_TypeHierarchy = "<leader>st 展示类继承关系"
nnoremap <Leader>st :action TypeHierarchy<CR>
" ShowParameterInfo
let g:WhichKeyDesc_Show_ParameterInfo = "<leader>si 展示参数信息"
nmap <leader>si <action>(ParameterInfo)
" LocalHistory.History
let g:WhichKeyDesc_Show_LocalHistory_History  = "<leader>sh 当前文件本地历史"
nnoremap <leader>sh :action LocalHistory.ShowHistory<CR>
" 查看所有断点
let g:WhichKeyDesc_Show_point_ViewBreakpoints = "<leader>sr 查看所有断点"
nnoremap <Leader>sr :action ViewBreakpoints<CR>
" Markdown.Layout.EditorAndPreview
let g:WhichKeyDesc_Show_Markdown_Layout_EditorAndPreview = "<leader>sm Markdown.EditorAndPreview"
nmap <leader>sm <action>(Markdown.Layout.EditorAndPreview)
" Markdown.Layout.PreviewOnly
let g:WhichKeyDesc_Show_Markdown_Layout_PreviewOnly = "<leader>sv Markdown切换到视图模式"
nmap <leader>sv <action>(Markdown.Layout.PreviewOnly)
" Markdown.Layout.EditorOnly
let g:WhichKeyDesc_Show_Markdown_Layout_EditorAndPreview = "<leader>sw Markdown切换到编辑模式"
nmap <leader>sw <action>(Markdown.Layout.EditorOnly)



" t Toggle ⭐️
let g:WhichKeyDesc_Toggle = "<leader>t Toggle"
let g:WhichKeyDesc_Toggle_ToggleBookmark = "<leader>ta 标记书签"
nnoremap <Leader>ta :action ToggleBookmark<CR>
" 打断点
let g:WhichKeyDesc_Toggle_ToggleLineBreakpoint = "<leader>tb 标记断点"
nnoremap <Leader>tb :action ToggleLineBreakpoint<CR>
" ArthasWatch
let g:WhichKeyDesc_Toggle_ArthasWatch = "<leader>tw Arthas Watch"
nnoremap <Leader>tw :action ArthasWatch<CR>




" w: Window ⭐️
let g:WhichKeyDesc_Windows = "<leader>w Windows"
" 分屏光标跳上面
let g:WhichKeyDesc_Windows_CursorJump = "<leader>ww 光标跳转"
nnoremap <Leader>ww <C-W>w
" 上下分屏
let g:WhichKeyDesc_Windows_SplitScreenUpAndDown = "<leader>wd 上下分屏"
nnoremap <Leader>wd <C-W>s
" 横向分屏
let g:WhichKeyDesc_Windows_SplitScreenLeftAndRight = "<leader>wr 横向分屏"
nnoremap <Leader>wr <C-W>v
" 窗口最大化
let g:WhichKeyDesc_Windows_HideAllWindows = "<leader>wa 窗口最大化"
nmap <leader>wa <action>(HideAllWindows)
" 删除所有分屏
let g:WhichKeyDesc_Windows_UnsplitAll = "<leader>ws 删除所有分屏"
nmap <leader>ws <action>(UnsplitAll)
" 关闭当前窗口
let g:WhichKeyDesc_Windows_CloseBuffer = "<leader>wc 关闭当前窗口"
nmap <leader>wc :q!<CR>
" 改变视图
let g:WhichKeyDesc_Windows_ChangeView = "<leader>wv 改变视图"
nmap <leader>wv <action>(ChangeView)
" 当前已打开项目列表
let g:WhichKeyDesc_Windows_OpenProjectWindows = "<leader>wp 当前已打开项目列表"
nmap <leader>wp <action>(OpenProjectWindows)
"打开Terminal
let g:WhichKeyDesc_Windows_ActivateTerminalToolWindow = "<leader>wt 打开Terminal"
nnoremap <Leader>wt Vy<CR>:action ActivateTerminalToolWindow<CR>
" 进入 ideavimrc
let g:WhichKeyDesc_Windows_ideavimrc = "<leader>we 打开ideavimrc"
nnoremap <leader>we :e ~/.ideavimrc<CR>
" 展示最近打开项目列表
let g:WhichKeyDesc_Windows_RecentProjectListGroup = "<leader>wg 展示最近打开项目列表"
nnoremap <leader>wg :action RecentProjectListGroup<CR>
" 关闭当前项目
let g:WhichKeyDesc_Windows_CloseProject = "<leader>wx 关闭当前项目"
nnoremap <leader>wx :action CloseProject<CR>


" z: zip(fold) ⭐️
let g:WhichKeyDesc_Zip = "<leader>z Zip"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo 解压缩所有方法"
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc 压缩所有方法"
nmap <leader>zc <action>(CollapseAllRegions)
let g:WhichKeyDesc_Zip_Zip = "<leader>zn 解压缩当前方法"
nmap <leader>zn <action>(ExpandCollapseToggleAction)


" d: del ⭐️
let g:WhichKeyDesc_Del = "<leader>d del"
" 删除当前文件 (快速删除)
let g:WhichKeyDesc_Del_SafeDelete = "<leader>dt 删除当前文件"
nnoremap <leader>dt :action SafeDelete<CR>



" l: leetcode ⭐️
let g:WhichKeyDesc_Lt = "<leader>l leetcode"
" 执行代码
let g:WhichKeyDesc_Lt_RunCodeAction = "<leader>lr 执行代码"
nmap <leader>lr <action>(leetcode.RunCodeAction)
" 运行测试案例
let g:WhichKeyDesc_Lt_TestcaseAction = "<leader>lt 运行测试案例"
nmap <leader>lt <action>(leetcode.TestcaseAction)
" 提交代码
let g:WhichKeyDesc_Lt_SubmitAction = "<leader>lb 提交代码"
nmap <leader>lb <action>(leetcode.SubmitAction)
" OpenContentAction
let g:WhichKeyDesc_Lt_OpenContentAction = "<leader>lc 展示题目"
nmap <leader>lc <action>(leetcode.editor.OpenContentAction)
" OpenContentAction
let g:WhichKeyDesc_Lt_OpenSolutionAction = "<leader>ls 展示题解"
nmap <leader>ls <action>(leetcode.editor.OpenSolutionAction)
" menu
let g:WhichKeyDesc_Lt_OpenMenu = "<leader>lm 打开菜单"
nmap <leader>lm <action>(leetcode.editor.menu)
" 查找工具栏
let g:WhichKeyDesc_Lt_findToolbar = "<leader>lf 查找工具栏"
nmap <leader>lf <action>(leetcode.all.find.Toolbar)
" 从Web打开
let g:WhichKeyDesc_Lt_OpenInWebAction = "<leader>lw 从Web打开"
nmap <leader>lw <action>(leetcode.editor.OpenInWebAction)
" 快速选择
let g:WhichKeyDesc_Lt_PickAction = "<leader>lp 快速选择"
nmap <leader>lp <action>(leetcode.PickAction)
